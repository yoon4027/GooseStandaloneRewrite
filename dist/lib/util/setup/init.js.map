{"version":3,"sources":["../../../../src/lib/util/setup/init.ts"],"sourcesContent":["import { downloadFile } from \"#lib/util\";\nimport type { DiscordManifest, InitOptions } from \"#types/types.js\";\nimport { Logger } from \"@dimensional-fun/logger\";\nimport { toTitleCase } from \"@sapphire/utilities\";\nimport Asar from \"asar\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { existsSync } from \"node:fs\";\nimport { mkdir, rm, writeFile } from \"node:fs/promises\";\nimport { join } from \"path\";\nimport Tar from \"tar\";\nimport { brotliDecompressSync } from \"zlib\";\n\nconst logger = new Logger(\"init\");\n\nexport const init = async ({ channel, platform, buildPath }: InitOptions) => {\n  const dirPath = join(buildPath, channel, platform);\n\n  const basePath = join(\n    dirPath,\n    platform === \"windows\"\n      ? \"files\"\n      : `Discord${channel === \"stable\" ? \"\" : toTitleCase(channel)}`\n  );\n\n  const asarFilePath = join(basePath, \"resources\", \"app.asar\");\n  const asarExtractPath = join(dirPath, \"asar\");\n\n  await rm(basePath, { recursive: true, force: true });\n  await rm(asarExtractPath, { recursive: true, force: true });\n\n  const tarPath = join(dirPath, `discord.tar.gz`);\n  const exPath = join(dirPath);\n\n  if (!existsSync(dirPath)) {\n    await mkdir(dirPath, { recursive: true });\n  }\n\n  if (!existsSync(tarPath)) {\n    switch (platform) {\n      case \"linux\": {\n        const url = `https://discord.com/api/download/${channel}?platform=linux&format=tar.gz`;\n\n        logger.info(\"Downloading tar (\", url, \")\");\n\n        await downloadFile(tarPath, url);\n\n        break;\n      }\n\n      case \"windows\": {\n        const manifestUrl = `https://discord.com/api/updates/distributions/app/manifests/latest?channel=${channel}&platform=win&arch=x86`;\n\n        logger.info(\"Downloading tar ( 1/2 - manifest -\", manifestUrl, \")\");\n\n        const manifestRequest: AxiosResponse<DiscordManifest> = await axios.get(\n          manifestUrl\n        );\n\n        if (manifestRequest.status !== 200)\n          logger.error(\"Failed to fetch the mainfest file.\");\n\n        const manifest = manifestRequest.data;\n\n        logger.info(\"Downloading tar ( 2/2 - tar -\", manifest.full.url, \")\");\n\n        const data = brotliDecompressSync(\n          await axios.get(manifest.full.url, { responseType: \"arraybuffer\" })\n        );\n\n        await writeFile(tarPath, data);\n\n        break;\n      }\n    }\n  }\n\n  logger.info(\"Got tar\");\n\n  if (!existsSync(basePath)) {\n    await Tar.x({\n      file: tarPath,\n      cwd: exPath,\n    });\n  }\n\n  logger.info(\"Extracted tar\");\n\n  if (platform === \"windows\") {\n    await rm(join(dirPath, `delta_manifest.json`));\n\n    logger.info(\n      \"Completed windows specific post-extract update package fixing\"\n    );\n  }\n\n  if (!existsSync(asarExtractPath)) {\n    void mkdir(asarExtractPath, { recursive: true });\n\n    Asar.extractAll(asarFilePath, asarExtractPath);\n  }\n\n  logger.info(\"Extracted asar\");\n\n  logger.info(\"Initialised\");\n\n  return {\n    dirPath,\n    basePath,\n\n    asarFilePath,\n    asarExtractPath,\n\n    platform,\n  };\n};\n"],"mappings":";;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM,SAAS,IAAI,OAAO,MAAM;AAEzB,MAAM,OAAO,8BAAO,EAAE,SAAS,UAAU,gBAA6B;AAC3E,QAAM,UAAU,KAAK,WAAW,SAAS,QAAQ;AAEjD,QAAM,WAAW,KACf,SACA,aAAa,YACT,UACA,UAAU,YAAY,WAAW,KAAK,YAAY,OAAO,GAC/D;AAEA,QAAM,eAAe,KAAK,UAAU,aAAa,UAAU;AAC3D,QAAM,kBAAkB,KAAK,SAAS,MAAM;AAE5C,QAAM,GAAG,UAAU,EAAE,WAAW,MAAM,OAAO,KAAK,CAAC;AACnD,QAAM,GAAG,iBAAiB,EAAE,WAAW,MAAM,OAAO,KAAK,CAAC;AAE1D,QAAM,UAAU,KAAK,SAAS,gBAAgB;AAC9C,QAAM,SAAS,KAAK,OAAO;AAE3B,MAAI,CAAC,WAAW,OAAO,GAAG;AACxB,UAAM,MAAM,SAAS,EAAE,WAAW,KAAK,CAAC;AAAA,EAC1C;AAEA,MAAI,CAAC,WAAW,OAAO,GAAG;AACxB,YAAQ;AAAA,WACD,SAAS;AACZ,cAAM,MAAM,oCAAoC;AAEhD,eAAO,KAAK,qBAAqB,KAAK,GAAG;AAEzC,cAAM,aAAa,SAAS,GAAG;AAE/B;AAAA,MACF;AAAA,WAEK,WAAW;AACd,cAAM,cAAc,8EAA8E;AAElG,eAAO,KAAK,sCAAsC,aAAa,GAAG;AAElE,cAAM,kBAAkD,MAAM,MAAM,IAClE,WACF;AAEA,YAAI,gBAAgB,WAAW;AAC7B,iBAAO,MAAM,oCAAoC;AAEnD,cAAM,WAAW,gBAAgB;AAEjC,eAAO,KAAK,iCAAiC,SAAS,KAAK,KAAK,GAAG;AAEnE,cAAM,OAAO,qBACX,MAAM,MAAM,IAAI,SAAS,KAAK,KAAK,EAAE,cAAc,cAAc,CAAC,CACpE;AAEA,cAAM,UAAU,SAAS,IAAI;AAE7B;AAAA,MACF;AAAA;AAAA,EAEJ;AAEA,SAAO,KAAK,SAAS;AAErB,MAAI,CAAC,WAAW,QAAQ,GAAG;AACzB,UAAM,IAAI,EAAE;AAAA,MACV,MAAM;AAAA,MACN,KAAK;AAAA,IACP,CAAC;AAAA,EACH;AAEA,SAAO,KAAK,eAAe;AAE3B,MAAI,aAAa,WAAW;AAC1B,UAAM,GAAG,KAAK,SAAS,qBAAqB,CAAC;AAE7C,WAAO,KACL,+DACF;AAAA,EACF;AAEA,MAAI,CAAC,WAAW,eAAe,GAAG;AAChC,SAAK,MAAM,iBAAiB,EAAE,WAAW,KAAK,CAAC;AAE/C,SAAK,WAAW,cAAc,eAAe;AAAA,EAC/C;AAEA,SAAO,KAAK,gBAAgB;AAE5B,SAAO,KAAK,aAAa;AAEzB,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IAEA;AAAA,IACA;AAAA,IAEA;AAAA,EACF;AACF,GApGoB;","names":[]}